# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

# A wlow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  publish:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: ssh scp ssh pipelines
        id: deploy
        continue-on-error: true
        uses: cross-the-world/ssh-scp-ssh-pipelines@latest
        with:
          host: ${{ secrets.HOST }}
          user: ${{ secrets.USERNAME }}
          pass: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          connect_timeout: 10s
          first_ssh: |
            DIR="$HOME/teste_bkp"
            [ -d "${DIR}" ] && { cd teste_bkp
              docker-compose down
              cd ..
              mv test teste_bkp; }
          scp: |
            * => /test
          last_ssh: |
            cd test && docker-compose up --build
      
      - name: delete previous version
        if: steps.deploy.outputs.status == 'success'
        uses: cross-the-world/ssh-pipeline@master
        with:
          host: ${{ secrets.HOST }}
          user: ${{ secrets.USERNAME }}
          pass: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          connect_timeout: 10s
          script: |
            BK_DIR="$HOME/teste_bkp"
            [ -d "${BK_DIR}" ] && { rm -rf teste_bkp; }
      
      
      - name: restore previous version
        if: steps.deploy.outputs.status == 'failure'
        uses: cross-the-world/ssh-pipeline@master
        with:
          host: ${{ secrets.HOST }}
          user: ${{ secrets.USERNAME }}
          pass: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          connect_timeout: 10s
          script: |
            DIR="$HOME/test"
            BK_DIR="$HOME/teste_bkp"
            
            [ -d "${DIR}" ] && { cd test
              docker-compose down
              cd ..
              rm -rf test
              
              [ -d "${BK_DIR}" ] && { mv teste_bkp test
                cd test
                docker-compose up --build; }; }
