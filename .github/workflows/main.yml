# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]

  workflow_dispatch:

# A wlow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  create-build-id:
    runs-on: ubuntu-latest
    steps:
      - name: 'Set build id'
        id: build_id
        run: echo "::set-output name=id::$(date +%s)"
    outputs:
      build_id: ${{ steps.build_id.outputs.id }}


  build-api:
    runs-on: ubuntu-latest
    needs: create-build-id

    env:
      BUILD_ID: ${{ needs.create-build-id.outputs.build_id }}

    steps:
      - uses: actions/checkout@v2
      - name: docker login
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          BUILD_ID: ${{ steps.build_id.outputs.id }}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
        
      - name: Build docker image
        run: cd lib/api && docker build . --tag ${{ secrets.DOCKER_USER }}/sema:api-${{ github.sha }}-$BUILD_ID

      - name: Docker push
        run: docker push ${{ secrets.DOCKER_USER }}/sema:api-${{ github.sha }}-$BUILD_ID

  build-client-legacy:
    runs-on: ubuntu-latest
    needs: create-build-id

    env:
      BUILD_ID: ${{ needs.create-build-id.outputs.build_id }}

    steps:
      - uses: actions/checkout@v2
      - name: docker login
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
        
      - name: Build docker image
        run: |
          cd lib/client && \
          docker build \
            --build-arg SERVER_HOSTNAME=${{ secrets.SERVER_HOSTNAME }} \
            --build-arg NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }} \
            --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
            --tag ${{ secrets.DOCKER_USER }}/sema:client-legacy-${{ github.sha }}-$BUILD_ID \
            .

      - name: Docker push
        run: docker push ${{ secrets.DOCKER_USER }}/sema:client-legacy-${{ github.sha }}-$BUILD_ID

  build-client:
    runs-on: ubuntu-latest
    needs: create-build-id

    env:
      BUILD_ID: ${{ needs.create-build-id.outputs.build_id }}

    steps:
      - uses: actions/checkout@v2
      - name: docker login
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
        
      - name: Build docker image
        run: |
          cd lib/new-client && \
          docker build --tag ${{ secrets.DOCKER_USER }}/sema:client-${{ github.sha }}-$BUILD_ID .

      - name: Docker push
        run: docker push ${{ secrets.DOCKER_USER }}/sema:client-${{ github.sha }}-$BUILD_ID


  build-report-engine:
    runs-on: ubuntu-latest
    needs: create-build-id

    env:
      BUILD_ID: ${{ needs.create-build-id.outputs.build_id }}

    steps:
      - uses: actions/checkout@v2
      - name: docker login
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
        
      - name: Build docker image
        run: cd lib/report-engine && docker build . --tag ${{ secrets.DOCKER_USER }}/sema:report-engine-${{ github.sha }}-$BUILD_ID

      - name: Docker push
        run: docker push ${{ secrets.DOCKER_USER }}/sema:report-engine-${{ github.sha }}-$BUILD_ID

  deploy-on-kubernetes:
    runs-on: ubuntu-latest
    needs: [create-build-id, build-api, build-client, build-report-engine]

    env:
      API_IMAGE: api-${{ github.sha }}-${{ needs.create-build-id.outputs.build_id }}
      CLIENT_LEGACY_IMAGE: client-legacy-${{ github.sha }}-${{ needs.create-build-id.outputs.build_id }}
      REPORT_IMAGE: report-engine-${{ github.sha }}-${{ needs.create-build-id.outputs.build_id }}

    steps:
      - uses: actions/checkout@v2
      - uses: azure/setup-kubectl@v3
        with:
          version: v1.25.0
      - name: Deploy
        run: |
          envsubst < ci_v3/api/service.template > ci_v3/api/service.yml && \
          envsubst < ci_v3/client/service.template > ci_v3/client/service.yml && \
          envsubst < ci_v3/report-engine/service.template > ci_v3/report-engine/service.yml && \
          echo '${{ secrets.KUBECONFIG }}' > config.yaml && \
          kubectl --kubeconfig ./config.yaml apply -f ci_v3 -R -n prod 

#  deploy-on-kubernetes:
#    runs-on: ubuntu-latest
#    needs: [create-build-id, build-api, build-client, build-report-engine]
#
#    env:
#      BUILD_ID: ${{ needs.create-build-id.outputs.build_id }}
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: 'Deploy'
#        uses: WyriHaximus/github-action-helm3@v2
#        with:
#          exec: helm upgrade --install app ci/app --set client.image.tag=client-${{ github.sha }}-${{ env.BUILD_ID }} --set report-engine.image.tag=report-engine-${{ github.sha }}-${{ env.BUILD_ID }} --set api.image.tag=api-${{ github.sha }}-${{ env.BUILD_ID }} -n prod
##           exec: helm upgrade --install app ci/app --set report-engine.image.tag=report-engine-${{ github.sha }}-${{ env.BUILD_ID }} -n prod
#          kubeconfig: '${{ secrets.KUBECONFIG }}'

      # - name: 'Deploy'
      #   uses: 'deliverybot/helm@v1'
      #   with:
      #     chart: ci/app
      #     release: app
      #     namespace: prod
      #     values: |
      #       api:
      #         image:
      #           tag: "api-${{ github.sha }}-$BUILD_ID"
      #   env: 
      #     KUBECONFIG_FILE: ${{ secrets.KUBECONFIG }}
      
